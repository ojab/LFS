<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-preps-settingenviron">
  <?dbhtml filename="settingenvironment.html"?>

  <title>Setting Up the Environment</title>

  <para>Set up a good working environment by creating two new startup files
  for the <command>bash</command> shell. While logged in as user
  <systemitem class="username">lfs</systemitem>, issue the following command
  to create a new <filename>.bash_profile</filename>:</para>

<screen><userinput>cat &gt; ~/.bash_profile &lt;&lt; "EOF"
<literal>exec env -i HOME=$HOME TERM=$TERM PS1='\u:\w\$ ' /bin/bash</literal>
EOF</userinput></screen>

  <para>When logged on as user <systemitem class="username">lfs</systemitem>,
  the initial shell is usually a <emphasis>login</emphasis> shell which reads
  the <filename>/etc/profile</filename> of the host (probably containing some
  settings and environment variables) and then <filename>.bash_profile</filename>.
  The <command>exec env -i.../bin/bash</command> command in the
  <filename>.bash_profile</filename> file replaces the running shell with a new
  one with a completely empty environment, except for the <envar>HOME</envar>,
  <envar>TERM</envar>, and <envar>PS1</envar> variables. This ensures that no
  unwanted and potentially hazardous environment variables from the host system
  leak into the build environment. The technique used here achieves the goal of
  ensuring a clean environment.</para>

  <para>The new instance of the shell is a <emphasis>non-login</emphasis>
  shell, which does not read, and execute, the contents of <filename>/etc/profile</filename> or
  <filename>.bash_profile</filename> files, but rather reads, and executes, the
  <filename>.bashrc</filename> file instead. Create the
  <filename>.bashrc</filename> file now:</para>

<screen><userinput>cat &gt; ~/.bashrc &lt;&lt; "EOF"
<literal>set +h
umask 022
LFS=/mnt/lfs
LC_ALL=POSIX
LFS_TGT=$(uname -m)-lfs-linux-gnu
PATH=/usr/bin
if [ ! -L /bin ]; then PATH=/bin:$PATH; fi
PATH=$LFS/tools/bin:$PATH
CONFIG_SITE=$LFS/usr/share/config.site
export LFS LC_ALL LFS_TGT PATH CONFIG_SITE</literal>
EOF</userinput></screen>

  <variablelist>
    <title>The meaning of the settings in <filename>.bashrc</filename></title>

    <varlistentry>
      <term><parameter>set +h</parameter></term>
      <listitem>
  <para>The <command>set +h</command> command turns off
  <command>bash</command>'s hash function. Hashing is ordinarily a useful
  feature&mdash;<command>bash</command> uses a hash table to remember the
  full path of executable files to avoid searching the <envar>PATH</envar>
  time and again to find the same executable. However, the new tools should
  be used as soon as they are installed. By switching off the hash function,
  the shell will always search the <envar>PATH</envar> when a program is to
  be run. As such, the shell will find the newly compiled tools in
  <filename class="directory">$LFS/tools</filename> as soon as they are
  available without remembering a previous version of the same program in a
  different location.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>umask 022</parameter></term>
      <listitem>
  <para>Setting the user file-creation mask (umask) to 022 ensures that newly
  created files and directories are only writable by their owner, but are
  readable and executable by anyone (assuming default modes are used by the
  <function>open(2)</function> system call, new files will end up with permission
  mode 644 and directories with mode 755).</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>LFS=/mnt/lfs</parameter></term>
      <listitem>
  <para>The <envar>LFS</envar> variable should be set to the chosen mount
  point.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>LC_ALL=POSIX</parameter></term>
      <listitem>
  <para>The <envar>LC_ALL</envar> variable controls the localization of certain
  programs, making their messages follow the conventions of a specified country.
  Setting <envar>LC_ALL</envar> to <quote>POSIX</quote> or <quote>C</quote>
  (the two are equivalent) ensures that everything will work as expected in
  the chroot environment.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>LFS_TGT=(uname -m)-lfs-linux-gnu</parameter></term>
      <listitem>
  <para>The <envar>LFS_TGT</envar> variable sets a non-default, but compatible machine
  description for use when building our cross compiler and linker and when cross
  compiling our temporary toolchain. More information is contained in
  <xref linkend="ch-tools-toolchaintechnotes" role=""/>.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>PATH=/usr/bin</parameter></term>
      <listitem>
  <para>Many modern linux distributions have merged <filename
  class="directory">/bin</filename> and <filename
  class="directory">/usr/bin</filename>. When this is the case, the standard
  <envar>PATH</envar> variable needs just to be set to <filename
  class="directory">/usr/bin/</filename> for the <xref
  linkend="chapter-temporary-tools"/> environment. When this is not the
  case, the following line adds <filename class="directory">/bin</filename>
  to the path.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>if [ ! -L /bin ]; then PATH=/bin:$PATH; fi</parameter></term>
      <listitem>
  <para>If <filename class="directory">/bin</filename> is not a symbolic
  link, then it has to be added to the <envar>PATH</envar> variable.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>PATH=$LFS/tools/bin:$PATH</parameter></term>
      <listitem>
  <para>By putting <filename class="directory">$LFS/tools/bin</filename> ahead of the
  standard <envar>PATH</envar>, the cross-compiler installed at the beginning
  of <xref linkend="chapter-cross-tools"/> is picked up by the shell
  immediately after its installation. This, combined with turning off hashing,
  limits the risk that the compiler from the host be used instead of the
  cross-compiler.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>CONFIG_SITE=$LFS/usr/share/config.site</parameter></term>
      <listitem>
  <para>In <xref linkend="chapter-cross-tools"/> and
  <xref linkend="chapter-temporary-tools"/>, if this variable is not set,
  <command>configure</command> scripts
  may attempt to load configuration items specific to some distributions from
  <filename>/usr/share/config.site</filename> on the host system. Override
  it to prevent potential contamination from the host.</para>
      </listitem>
    </varlistentry>

    <varlistentry>
      <term><parameter>export ...</parameter></term>
      <listitem>
        <para>While the above commands have set some variables, in order
        to make them visible within any sub-shells, we export them.</para>
      </listitem>
    </varlistentry>

  </variablelist>

  <important>

     <para>Several commercial distributions add a non-documented instantiation
     of <filename>/etc/bash.bashrc</filename> to the initialization of
     <command>bash</command>. This file has the potential to modify the
     <systemitem class="username">lfs</systemitem>
     user's environment in ways that can affect the building of critical LFS
     packages. To make sure the <systemitem class="username">lfs</systemitem>
     user's environment is clean, check for the
     presence of <filename>/etc/bash.bashrc</filename> and, if present, move it
     out of the way.  As the <systemitem class="username">root</systemitem>
     user, run:</para>

     <screen role="nodump"><userinput>[ ! -e /etc/bash.bashrc ] || mv -v /etc/bash.bashrc /etc/bash.bashrc.NOUSE</userinput></screen> 

     <para>After use of the <systemitem class="username">lfs</systemitem>
     user is finished at the beginning of <xref
     linkend="chapter-chroot-temporary-tools"/>, you can restore
	 <filename>/etc/bash.bashrc</filename> (if desired).</para>

     <para>Note that the LFS Bash package we will build in
     <xref linkend="ch-system-bash"/> is not configured to load or execute
     <filename>/etc/bash.bashrc</filename>, so this file is useless on a
     completed LFS system.</para>
  </important>

  <para>Finally, to have the environment fully prepared for building the
  temporary tools, source the just-created user profile:</para>

<screen><userinput>source ~/.bash_profile</userinput></screen>

</sect1>
