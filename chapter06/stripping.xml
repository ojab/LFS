<?xml version="1.0" encoding="ISO-8859-1"?>
<!DOCTYPE sect1 PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
  "http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd" [
  <!ENTITY % general-entities SYSTEM "../general.ent">
  %general-entities;
]>

<sect1 id="ch-tools-stripping">
  <?dbhtml filename="stripping.html"?>

  <title>Stripping</title>

  <para>The steps in this section are optional, but if the LFS partition is
  rather small, it is beneficial to learn that unnecessary items can be removed.
  The executables and libraries built so far contain about 70 MB of unneeded
  debugging symbols. Remove those symbols with:</para>

<screen><userinput>$LFS_TGT-strip --strip-debug $LFS/usr/lib/*
$LFS_TGT-strip --strip-unneeded $LFS/usr/{,s}bin/*</userinput></screen>

  <para>These commands will skip a number of files, reporting that it does not
  recognize their file format. Most of these are scripts instead of binaries.
  Note that we use the <command>strip</command> program built in
  <quote>Binutils pass 1</quote>, since it is the one that knows how to strip
  our cross-compiled programs.</para>
<!-- Normally, the host "strip" could be used too, since it is actually the
same computer. But Some old versions of binutils may generate buggy crt1.o
and the like, because they do not know about recently introduced symbol
types. For more details,
see https://sourceware.org/bugzilla/show_bug.cgi?id=22875-->

  <para>Take care <emphasis>not</emphasis> to use
  <parameter>--strip-unneeded</parameter> on the libraries. The static
  ones would be destroyed and the toolchain packages would need to be
  built all over again.</para>

  <para>To save more, remove the documentation:</para>

<screen><userinput>rm -rf $LFS/usr/{,share}/{info,man,doc}</userinput></screen>

  <para>The libtool .la files are only useful when linking with static
  libraries. They are unneeded, and potentially harmful, when using dynamic
  shared libraries, specially when using also non-autotools build systems.
  Remove those files now:</para>

<screen><userinput>find $LFS/usr/{lib,libexec} -name \*.la -delete</userinput></screen>

  <para>At this point, you should have at least 3 GB of free space in
  <envar>$LFS</envar> that can be used to build and install Glibc and Gcc in
  the next phase. If you can build and install Glibc, you can build and install
  the rest too.</para>

  <sect2>
    <title>Backup / Restore</title>

    <para>
      Now that the essential tools has been created, its time to think about
      a backup. When every check has passed successfully in the previously 
      built packages, your temporary tools are in a good state and might be
      backed up for later reuse. In case of fatal failures in the subsequent
      sections, it often turns out that removing everything and start over
      (more carefully) is the best option to recover. Unfortunatly, all the
      temporary tools will be removed, too. To avoid extra time to redo
      something which has been built successfully, make sure you have at least
      600 MB free disk space (the source tarballs will be included in the
      backup archive) in the home directory of user 
      <systemitem class="username">lfs</systemitem> and prepare a backup:
    </para>

<screen role="nodump"><userinput>cd $LFS &amp;&amp;
tar -cJpf $HOME/temp-tools.tar.xz .
</userinput></screen>

    <para>
      In case you have to start over as some mistakes has been made, you can
      use this backup to restore the temporary tools and save some time on
      the way to recover. Since the sources are located under 
      <filename class="directory">$LFS</filename>, they are included in the
      backup archive as well, so you need not to download them again. After
      checking that <filename class="directory">$LFS</filename> is set proper,
      restore the backup by executing the following commands:
    </para>

<screen role="nodump"><userinput>cd $LFS &amp;&amp;
rm -rf ./* &amp;&amp;
tar -xpf $HOME/temp-tools.tar.xz
</userinput></screen>

    <para>
      Again, double check that the environment has been setup proper and
      continue building the rest of the system.
    </para>

  </sect2>

</sect1>
